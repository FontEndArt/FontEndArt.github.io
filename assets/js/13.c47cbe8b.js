(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{222:function(t,_,v){"use strict";v.r(_);var r=v(0),i=Object(r.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"基本的数据结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本的数据结构"}},[t._v("#")]),t._v(" 基本的数据结构")]),t._v(" "),v("h2",{attrs:{id:"认识数据结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#认识数据结构"}},[t._v("#")]),t._v(" 认识数据结构")]),t._v(" "),v("h3",{attrs:{id:"数据结构的说明"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据结构的说明"}},[t._v("#")]),t._v(" 数据结构的说明")]),t._v(" "),v("hr"),t._v(" "),v("p",[t._v("数据结构起源于程序设计，是用计算机来存储、组织数据的方式。数据结构不是使我们学会编码，而是为我们提供一种编程的思想，具有更好的思路。")]),t._v(" "),v("p",[t._v("关于数据结构有两种说法，如下：")]),t._v(" "),v("ul",[v("li",[t._v("广义的说法：数据结构 = 数据存储 + 算法")]),t._v(" "),v("li",[t._v("狭义的说法：数据结构 = 数据的存储；")])]),t._v(" "),v("h3",{attrs:{id:"数据结构和算法的关系"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据结构和算法的关系"}},[t._v("#")]),t._v(" 数据结构和算法的关系")]),t._v(" "),v("hr"),t._v(" "),v("p",[t._v("数据结构与算法是相互依托的关系。计算机解决问题，应该是先从具体问题中抽象出一个适当的数据模型，设计出一个解此数据模型的算法：")]),t._v(" "),v("ul",[v("li",[t._v("数据结构 ==> 建筑工程中的建筑设计图")]),t._v(" "),v("li",[t._v("算法 ==> 工程中的施工流程图")])]),t._v(" "),v("h3",{attrs:{id:"用数据结构可以做什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#用数据结构可以做什么"}},[t._v("#")]),t._v(" 用数据结构可以做什么")]),t._v(" "),v("hr"),t._v(" "),v("ul",[v("li",[t._v("程序员的内功心法之一")]),t._v(" "),v("li",[t._v("有效管理数据对象")]),t._v(" "),v("li",[t._v("解决处理性能问题")]),t._v(" "),v("li",[t._v("面试加分项（现在一些简单的数据结构和算法已经是必备项了）")])]),t._v(" "),v("h2",{attrs:{id:"基本数据结构及衍生结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本数据结构及衍生结构"}},[t._v("#")]),t._v(" 基本数据结构及衍生结构")]),t._v(" "),v("h3",{attrs:{id:"几个算法中的基本概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#几个算法中的基本概念"}},[t._v("#")]),t._v(" 几个算法中的基本概念")]),t._v(" "),v("hr"),t._v(" "),v("ul",[v("li",[t._v("数据")]),t._v(" "),v("li",[t._v("数据元素")]),t._v(" "),v("li",[t._v("数据项")]),t._v(" "),v("li",[t._v("数据对象")]),t._v(" "),v("li",[t._v("数据结构")])]),t._v(" "),v("p",[t._v("它们之间的关系就像下图一样：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://github.com/FontEndArt/blog/blob/master/images/arithmetic/arithmetic-concept.png?raw=true",alt:"算法的几个基本概念"}})]),t._v(" "),v("h3",{attrs:{id:"浅析数据结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浅析数据结构"}},[t._v("#")]),t._v(" 浅析数据结构")]),t._v(" "),v("hr"),t._v(" "),v("p",[t._v("数据元素相互之间的关系称为结构。数据结构是与算法紧密结合的。")]),t._v(" "),v("ul",[v("li",[t._v("逻辑结构：反映数据元素之间的逻辑关系。")]),t._v(" "),v("li",[t._v("存储结构：数据结构在计算机中的表示。")]),t._v(" "),v("li",[t._v("算法：对数据的操作")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://github.com/FontEndArt/blog/blob/master/images/arithmetic/arithmetic_structure_sort.png?raw=true",alt:"数据结构分类"}})]),t._v(" "),v("p",[v("img",{attrs:{src:"https://github.com/FontEndArt/blog/blob/master/images/arithmetic/arithmetic_structure_system.png?raw=true",alt:"数据结构与算法体系图"}})]),t._v(" "),v("h3",{attrs:{id:"基本的逻辑结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本的逻辑结构"}},[t._v("#")]),t._v(" 基本的逻辑结构")]),t._v(" "),v("hr"),t._v(" "),v("p",[v("img",{attrs:{src:"https://github.com/FontEndArt/blog/blob/master/images/arithmetic/luojijiegou.png?raw=true",alt:"基本的逻辑结构"}})]),t._v(" "),v("ul",[v("li",[t._v("集合")]),t._v(" "),v("li",[t._v("线性结构")]),t._v(" "),v("li",[t._v("树状结构")]),t._v(" "),v("li",[t._v("图状结构（网状结构）")])]),t._v(" "),v("h2",{attrs:{id:"集合"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[t._v("#")]),t._v(" 集合")]),t._v(" "),v("p",[t._v("数据结构中的集合关系就类似于数学中的集合。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://github.com/FontEndArt/blog/blob/master/images/arithmetic/jihe.png?raw=true",alt:"集合"}})]),t._v(" "),v("ul",[v("li",[t._v("集合中的数据成员是无序的。")]),t._v(" "),v("li",[t._v("每个数据成员在集合中不能重复，仅且只出现一次。")])]),t._v(" "),v("h2",{attrs:{id:"线性表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线性表"}},[t._v("#")]),t._v(" 线性表")]),t._v(" "),v("p",[t._v("线性结构中的数据元素之间是一对一的关系。也就是数据元素一个接一个地排列。")]),t._v(" "),v("ul",[v("li",[t._v("用来存放特定的某一个类型的元素")]),t._v(" "),v("li",[t._v("物理结构为顺序表和链表")]),t._v(" "),v("li",[t._v("线性表的基本操作\n"),v("ul",[v("li",[t._v("1.创建线性表")]),t._v(" "),v("li",[t._v("2.添加元素")]),t._v(" "),v("li",[t._v("3.删除元素")]),t._v(" "),v("li",[t._v("4.读数据")]),t._v(" "),v("li",[t._v("5.遍历线性表")]),t._v(" "),v("li",[t._v("6.查找线性表")]),t._v(" "),v("li",[t._v("7.销毁线性表")])])])]),t._v(" "),v("h3",{attrs:{id:"线性表的衍生结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线性表的衍生结构"}},[t._v("#")]),t._v(" 线性表的衍生结构")]),t._v(" "),v("ul",[v("li",[t._v("1.栈")]),t._v(" "),v("li",[t._v("2.队列")]),t._v(" "),v("li",[t._v("3.串")]),t._v(" "),v("li",[t._v("...")])]),t._v(" "),v("h3",{attrs:{id:"栈"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[t._v("#")]),t._v(" 栈")]),t._v(" "),v("p",[t._v("栈是一种被限制操作的线性表。栈是一种先进后出 LIFO(Last In First Out) 的数据结构。(桶装的薯片是现实中一个最简单的栈结构))")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://github.com/FontEndArt/blog/blob/master/images/arithmetic/zhan.png?raw=true",alt:"栈"}})]),t._v(" "),v("ul",[v("li",[v("p",[t._v("基本概念")]),t._v(" "),v("ul",[v("li",[t._v("向栈中添加数据叫"),v("strong",[t._v("入栈")])]),t._v(" "),v("li",[t._v("从栈中向外拿数据叫"),v("strong",[t._v("出栈")])]),t._v(" "),v("li",[t._v("栈中没有数据叫"),v("strong",[t._v("空栈")])]),t._v(" "),v("li",[t._v("空栈或者栈中只有1个元素的时候 栈顶即是栈底")]),t._v(" "),v("li",[t._v("添加元素的时候，栈顶在不断的变化")])])]),t._v(" "),v("li",[v("p",[t._v("操作规则")]),t._v(" "),v("ul",[v("li",[t._v("创建栈结构")]),t._v(" "),v("li",[t._v("入栈")]),t._v(" "),v("li",[t._v("出栈")]),t._v(" "),v("li",[t._v("读栈顶")]),t._v(" "),v("li",[t._v("清空栈")]),t._v(" "),v("li",[t._v("销毁栈结构")])])]),t._v(" "),v("li",[v("p",[t._v("用途:")]),t._v(" "),v("ul",[v("li",[t._v("解决括号匹配检查")]),t._v(" "),v("li",[t._v("浏览器的后退或编辑器的undo功能")])])])]),t._v(" "),v("h3",{attrs:{id:"队列"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[t._v("#")]),t._v(" 队列")]),t._v(" "),v("p",[t._v("队列是一种被限制操作的线性表。队列是一种先进先出 FIFO(First In First Out) 的数据结构。(我们在吃自助的时候,放冰淇凌筒的那个管子就是一种队列,只能从上往下走)")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://github.com/FontEndArt/blog/blob/master/images/arithmetic/duilie.png?raw=true",alt:"队列"}})]),t._v(" "),v("ul",[v("li",[v("p",[t._v("基本概念")]),t._v(" "),v("ul",[v("li",[t._v("向队列中添加数据叫"),v("strong",[t._v("入队")])]),t._v(" "),v("li",[t._v("从队列中向外拿数据叫"),v("strong",[t._v("出队")])]),t._v(" "),v("li",[t._v("队列中没有数据叫"),v("strong",[t._v("空队")])]),t._v(" "),v("li",[t._v("当队列中只有1个元素的时候 该元素即是队首，又是队尾")])])]),t._v(" "),v("li",[v("p",[t._v("用途:")]),t._v(" "),v("ul",[v("li",[t._v("消息队列、视频弹幕")]),t._v(" "),v("li",[t._v("维护打印机任务")])])])]),t._v(" "),v("blockquote",[v("p",[t._v("也有一些特殊的队列，比如生活中在车站买票的时候有军人优先，这就是优先队列；\n事件循环机制是一种环形队列；")])]),t._v(" "),v("h2",{attrs:{id:"树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#树"}},[t._v("#")]),t._v(" 树")]),t._v(" "),v("p",[t._v("树是由若干个有限节点组成的一个具有层次关系的集合。我们把它叫做“树”是因为它看起来像一棵倒挂的树。树是基本的几种数据结构之一。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://github.com/FontEndArt/blog/blob/master/images/arithmetic/shu.png?raw=true",alt:"树"}})]),t._v(" "),v("blockquote",[v("p",[t._v("以下基本概念不如看图来的简单明了，请优先看图，或在看基本概念的时候请结合上图（树）。")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("主要基本概念")]),t._v(" "),v("ul",[v("li",[t._v("每个元素称为"),v("strong",[t._v("结点")]),t._v("(node)")]),t._v(" "),v("li",[t._v("有一个特定的结点被称为"),v("strong",[t._v("根结点")]),t._v("或树根(root)")]),t._v(" "),v("li",[t._v("除根结点之外的其余数据元素被分为m(m≥0)个互不相交的集合T1，T2，……Tm-1，其中每一个集合Ti(1<=i<=m)本身也是一棵树，被称作原树的"),v("strong",[t._v("子树")]),t._v("(subtree)")])])]),t._v(" "),v("li",[v("p",[t._v("其余基本概念")]),t._v(" "),v("ul",[v("li",[t._v("单个结点是一棵树，树根就是该结点本身")]),t._v(" "),v("li",[t._v("空集合也是树，称为"),v("strong",[t._v("空树")]),t._v("。空树中没有结点")]),t._v(" "),v("li",[t._v("一个结点含有的子树的个数称为该结点的"),v("strong",[t._v("度")])]),t._v(" "),v("li",[t._v("度为0的结点称为"),v("strong",[t._v("叶结点")]),t._v("或终端结点")]),t._v(" "),v("li",[t._v("度不为0的结点称为非终端结点或"),v("strong",[t._v("分支结点")])]),t._v(" "),v("li",[t._v("若一个结点含有子结点，则这个结点称为其子结点的"),v("strong",[t._v("父结点")])]),t._v(" "),v("li",[t._v("一个结点含有的子树的根结点称为该结点的"),v("strong",[t._v("子结点")])]),t._v(" "),v("li",[t._v("具有相同父结点的结点互称为"),v("strong",[t._v("兄弟结点")])]),t._v(" "),v("li",[t._v("一棵树中，最大的结点的度称为"),v("strong",[t._v("树的度")])]),t._v(" "),v("li",[t._v("从根开始定义起，根为第1层，根的子结点为第2层，也叫"),v("strong",[t._v("深1")]),t._v("，"),v("strong",[t._v("深2")])]),t._v(" "),v("li",[t._v("树的高度或深度说的就是树中结点的最大层次")]),t._v(" "),v("li",[t._v("从根到该结点所经分支上的所有结点称为该节点的"),v("strong",[t._v("祖先")])])])]),t._v(" "),v("li",[v("p",[t._v("树的数学基础是:")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("图论")])])])]),t._v(" "),v("li",[v("p",[t._v("树的特点")]),t._v(" "),v("ul",[v("li",[t._v("每个结点有零个或多个子结点；")]),t._v(" "),v("li",[t._v("没有父结点的结点称为根结点；")]),t._v(" "),v("li",[t._v("每一个非根结点有且只有一个父结点；")]),t._v(" "),v("li",[t._v("除了根结点外，每个子结点可以分为多个不相交的子树；")]),t._v(" "),v("li",[v("strong",[t._v("一棵树中每两个点之间都有且只有一条路径")])]),t._v(" "),v("li",[v("strong",[t._v("一颗有N个点的树有N-1条边")])])])])]),t._v(" "),v("p",[v("strong",[t._v("试一试")])]),t._v(" "),v("p",[t._v("分辨下图哪一个是树：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://github.com/FontEndArt/blog/blob/master/images/arithmetic/fenbianshu.png?raw=true",alt:"分辨哪一个是树"}})]),t._v(" "),v("h3",{attrs:{id:"树的遍历"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#树的遍历"}},[t._v("#")]),t._v(" 树的遍历")]),t._v(" "),v("p",[t._v("按照某种规则，不重复地访问某种树的所有节点。")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("先序遍历(深度优先)\n"),v("img",{attrs:{src:"https://github.com/FontEndArt/blog/blob/master/images/arithmetic/xianxu.png?raw=true",alt:"先序遍历"}})])]),t._v(" "),v("li",[v("p",[t._v("中序遍历(深度优先)\n"),v("img",{attrs:{src:"https://github.com/FontEndArt/blog/blob/master/images/arithmetic/zhongxu.png?raw=true",alt:"中序遍历"}})])]),t._v(" "),v("li",[v("p",[t._v("后序遍历(深度优先)\n"),v("img",{attrs:{src:"https://github.com/FontEndArt/blog/blob/master/images/arithmetic/houxu.png?raw=true",alt:"后序遍历"}})])]),t._v(" "),v("li",[v("p",[t._v("层序遍历(广度优先)\n"),v("img",{attrs:{src:"https://github.com/FontEndArt/blog/blob/master/images/arithmetic/cengxu.png?raw=true",alt:"层序遍历"}})])])]),t._v(" "),v("h3",{attrs:{id:"树的衍生"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#树的衍生"}},[t._v("#")]),t._v(" 树的衍生")]),t._v(" "),v("ul",[v("li",[t._v("无序树:树中任意节点的子结点之间没有顺序关系，这种树称为无序树,也称为自由树")]),t._v(" "),v("li",[t._v("有序树:树中任意节点的子结点之间有顺序关系")]),t._v(" "),v("li",[t._v("二叉树:每个节点最多含有两个子树的树称为二叉树")]),t._v(" "),v("li",[t._v("完全二叉树:除了最后一层，其它各层节点数都达到最大")]),t._v(" "),v("li",[t._v("满二叉树:每一层上的结点数都是最大结点数")]),t._v(" "),v("li",[t._v("霍夫曼树:带权路径最短的二叉树，也叫最优二叉树")])]),t._v(" "),v("blockquote",[v("p",[t._v("具体的可以移步Wiki或者百度百科 (^-^)")])]),t._v(" "),v("h2",{attrs:{id:"图"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#图"}},[t._v("#")]),t._v(" 图")]),t._v(" "),v("p",[t._v("由顶点的集合(不能是空集)和边的集合组成的结构，表现的是多对多的关系")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://github.com/FontEndArt/blog/blob/master/images/arithmetic/tu.png?raw=true",alt:"图"}})]),t._v(" "),v("ul",[v("li",[t._v("数学基础是:图论")]),t._v(" "),v("li",[t._v("几个基本概念:\n"),v("ul",[v("li",[t._v("顶点")]),t._v(" "),v("li",[t._v("边")]),t._v(" "),v("li",[t._v("权")]),t._v(" "),v("li",[t._v("有向图与无向图")])])])]),t._v(" "),v("h2",{attrs:{id:"前端中的数据结构应用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前端中的数据结构应用"}},[t._v("#")]),t._v(" 前端中的数据结构应用")]),t._v(" "),v("ul",[v("li",[t._v("1.了解常识级别的数据结构与算法")]),t._v(" "),v("li",[t._v("2.传统前端的核心是DOM")]),t._v(" "),v("li",[t._v("3.编写自己的前端控件")]),t._v(" "),v("li",[t._v("4.前端游戏")]),t._v(" "),v("li",[t._v("5.图像处理")]),t._v(" "),v("li",[t._v("...")])]),t._v(" "),v("h2",{attrs:{id:"结语"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[t._v("#")]),t._v(" 结语")]),t._v(" "),v("p",[t._v("到这里大家应该对于基本的数据结构有了一定的了解，算法的世界中，了解数据结构有助于我们更好的、更快的处理数据。")]),t._v(" "),v("blockquote",[v("p",[t._v("计算机世界的知识很多都是从现实世界中学习过来的。多了解我们的生活，也就是在了解计算机世界。")])])])}),[],!1,null,null,null);_.default=i.exports}}]);